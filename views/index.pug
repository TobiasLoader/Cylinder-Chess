//- n is the number of base edges
//- hm is the height multiplier relative to base circumradius
//- typ is shape type (0 for prism, 1 for pyramid)
mixin shape3d(n = 8, hm = 2, typ = 0)
	- let ba = 2*Math.PI/n;
	- let rri = Math.cos(.5*ba);
	- let rbe = +(2*Math.sin(.5*ba)).toFixed(3);
	- let rfh = typ ? +Math.hypot(rri, hm).toFixed(3) : hm;
	- let ax = typ ? +(Math.atan(rri/hm)*180/Math.PI).toFixed(3) : 0;
	- let nb = 2 - typ, vx = [], oa = .5*(((n - 1)%2)*ba - Math.PI);
	- for(let i = 0; i < n; i++) {
		- let ca = oa + i*ba;
		- vx.push([50*(1 + Math.cos(ca)), 50*(1 + Math.sin(ca))])
	- }
	- vx = vx.map(c => c.map(k => `${+k.toFixed(2)}%`).join(' '));
	section.scene(style=`--typ: ${typ}; --rri: ${+rri.toFixed(3)}; --rbe: ${rbe};
											 --rfh: ${rfh}; --ax: ${ax}deg; --vx: ${vx}`)
		.s3d
			- for(let i = 0; i < n; i++)
				.face.lat(style=`--j: ${+(i/n).toFixed(3)}`)
			- for(let i = 0; i < nb; i++)
				.face.base(style=`--k: ${1 - i}`)


doctype html
head
	title Cylinder Chess
	link(rel='stylesheet' href='styles.css')
h1 Cylinder Chess
p Click start to init new game, or type in room num and join.
#startgame.postbutton Start Game
input#roomnum(placeholder='#ROOM')
#joingame.postbutton Join Game
#waitingarea(style='display:none;width:400px;height:400px;border:black 1px solid;')
	| Waiting AREA
	h2.room
	#closegame.postbutton close
#gamearea(style='display:none;width:400px;height:400px;border:black 1px solid;')
	| Game AREA
	h2.room
	h3#movemade
	h3#mytime
	h3#opponenttime(style='display:inline;')
+shape3d(8, 2, 0)
script(src='/socket.io/socket.io.js')
script(type='module' src='script.mjs')